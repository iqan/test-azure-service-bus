@model TestWebRole.Models.ReturnCreated

@{
    ViewBag.Title = "Send";
}

<h2>Send Return Created Message</h2>

@if (ViewBag.Error != null)
{
    <p class="text-danger">
        @ViewBag.Error
    </p>
}
<div class="row">
    <div class="col-md-8">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <p>
                    Total messages in queue <b>"@ViewBag.QueueName"</b>: @ViewBag.MessageCount
                </p>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                
                <div class="form-group">
                    @Html.LabelFor(model => model.ReturnReference, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.ReturnReference, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ReturnReference, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OrderReference, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.OrderReference, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OrderReference, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CustomerId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReturnMethod, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.ReturnMethod,
                            new List<SelectListItem>
                            {
                                new SelectListItem
                                {
                                    Text = "DropOff", Value = "0" , Selected = true
                                },
                                new SelectListItem
                                {
                                    Text = "Collection", Value = "1"
                                }
                            },
                            new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ReturnMethod, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.Label("Send to a Topic?", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.CheckBox("IsTopic",
                            new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-3 col-md-9">
                        <input type="submit" value="Send" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-md-4">
        <div class="form-horizontal">
            <p style="font-weight: bold">Output:</p>
            <hr />
            @if (TempData["Result"] != null)
            {
                <div>
                    <div>
                        <p>
                            @TempData["Result"].ToString()
                        </p>
                    </div>
                    @if (TempData["Out"] != null)
                    {
                        <div>
                            @Html.Raw(TempData["Out"])
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
